<p id="notice"><%= notice %></p>
<%= link_to 'New Post', teacher_post_new_path(id: @teacher.id), method: :post %>

<table id = "Posts"></table>

<%= link_to 'Back', teacher_path(@teacher) %>

<script>

alert = function(){};
window.onload = show_all_details();


function show_all_details()
{
	arr = ["", "Unposted", "Unverified", "Verified", "Flagged", "Rejected"];
	var table = document.getElementById("Posts");
	$.ajax({
		url:'/give_categories',
		type: 'POST',
		async: false,
		success: function(data_returned_by_server){
			categories = data_returned_by_server
		}	
	});
	var i = 0;
	for (i = 0; i < 2; i++)
	{
		var row = table.insertRow(-1);
		var cell1 = row.insertCell(0);
		str = categories[i].name.bold();
		cell1.innerHTML = str.fontsize(3.5);
		$.ajax({
            	url: '/give_subcat_teacher_posts/',
            	type: 'POST',
				data: {id: (i+1)},
				async: false,
				success: function (data_returned_by_server) {
					data_returned = data_returned_by_server
					}
					});
			
	
		var row = table.insertRow(-1);
		
		if (data_returned.subs1.length == 0)
		{
			$.ajax({
            	url: '/give_teacher_posts_bysub/',
            	type: 'POST',
				data: {id: "<%=@teacher.id%>", l1: (i+1).toString(10), l2: -1},
				async: false,
				success: function (data_returned_by_server) {
					data_returned1 = data_returned_by_server;				
				}
			
			});
			if (data_returned1.length == 0)
			{
			 	var cell1 = row.insertCell(0);
				cell1.innerHTML = "NIL";
			}
			else
			{
				for (j = 0; j < data_returned1.length; j++)
				{
					var row = table.insertRow(-1);
				
  					var cell2 = row.insertCell(0);
  					var cell3 = row.insertCell(1);
  					cell2.innerHTML = reveal(data_returned1[j].id);
  					cell3.innerHTML = arr[data_returned1[j].status];
  			
				}
			}
		}
					
		else
		{
			$.ajax({
            	url: '/give_teacher_posts_bysub/',
            	type: 'POST',
				data: {id: "<%=@teacher.id%>", l1: (i+1).toString(10), l2: data_returned.subs_id1},
				async: false,
				success: function (data_returned_by_server) {
					data_returned1 = data_returned_by_server;	
				}
			});			
				
			var j = 0;
			for (j = 0; j < data_returned.subs1.length; j++)
			{
				var flag = 0;
				for (var k = 0; k < data_returned1.length; k++)
				{
					
					if (data_returned1[k].subcategory == data_returned.subs_id1[j])
					{
						flag = 1;
						var row = table.insertRow(-1);
						var cell1 = row.insertCell(0);
  						var cell2 = row.insertCell(1);
  						var cell3 = row.insertCell(2);
						cell1.innerHTML = data_returned.subs1[j];
  						cell2.innerHTML = reveal(data_returned1[k].id);
  						cell3.innerHTML = arr[data_returned1[k].status];
					}
					
				}
  			
  				if (flag == 0)
  				{			
  					var row = table.insertRow(-1);
					var cell1 = row.insertCell(0);
  					var cell2 = row.insertCell(1);
  					cell1.innerHTML = data_returned.subs1[j];
  					cell2.innerHTML = "NIL";
  				}
  			}
  			}
  	 			
  			
		for (var j = 0; j < 5; j ++)
		{
			var row = table.insertRow(-1);
			var cell1 = row.insertCell(0);
		}
	}
}	
		


function signer(post_details)
{

	var x = post_details.signature;
	var public_key = bigInt(post_details.sign_id, 10);
	
	var x1 = bigInt(x).modPow(bigInt("3"),bigInt(public_key));	
	var x2 = x1.toString(16);
	var y2 = x2.substring(64);
		x2 = x2.substring(0,64);
	var r1 = bigInt(y2,16).xor(bigInt(SHA256(x2),16)).toString(16);
	var message = bigInt(x2,16).xor(bigInt(SHA256(r1),16)); 	
	
	if (message.toString(16) == post_details.postkey)
			return "Signed by Verified Entity";
	else
		return "Unauthorised Verifier";

}



function reveal(a)
{
	var data_returned;
	var data_to_sent = {post_id: a, type: 2};
		$.ajax({
            	url: '/give_numbers',
            	type: 'POST',
            	datatype: 'text',
				data: data_to_sent,
				async: false,
				success: function (data_returned_by_server) {
				
				data_returned = data_returned_by_server;
            	
        		},
        		error: function (result) {
            		console.log('error');
        		}
			
            });
            
            var i;
            var sum = 0;
            for (i = 1; i < 6; i++)
            {
            	sum += data_returned[i];
            }
            
            return cryptico.decryptAESCBC(data_returned[0], SHA256(sum.toString(16)));            
				
	
}
</script>
